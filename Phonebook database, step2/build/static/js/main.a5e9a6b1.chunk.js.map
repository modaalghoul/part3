{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","inputValue","onChangeHandler","value","onChange","PersonForm","props","name","nameChangeHandler","number","numChangeHandler","onClick","submit","type","Persons","persons","removePersonOf","map","person","key","removePerson","Person","Notification","message","content","className","error","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","newSearch","setNewSearch","setMessage","useEffect","personService","initialValue","personsToShow","filter","match","RegExp","setTimeout","event","target","preventDefault","personExists","find","alert","window","confirm","newPerson","newMessage","concat","personToRemove","console","log","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5e9a6b1.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl).then(response => response.data)\n    return request\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject).then(response => response.data)\n    return request\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\n    return request\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`).then(response => response.data)\n    return request\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Filter = ({inputValue, onChangeHandler}) => {\n  return (\n    <div>\n      filter shown with: <input value={inputValue} onChange={onChangeHandler}/>\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form>\n      <div>\n        name: <input value={props.name} onChange={props.nameChangeHandler}/>\n      </div>\n      <div>\n        number: <input value={props.number} onChange={props.numChangeHandler}/>\n      </div>\n      <div>\n        <button onClick={props.submit} type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({persons, removePersonOf}) => {\n  return persons.map(\n    person=><Person key={person.id} name={person.name} number={person.number} \n    removePerson={()=>removePersonOf(person.id)} />\n    )\n}\n\nconst Person = ({name, number, removePerson}) => {\n  return <div>\n    {name} {number}\n    <button onClick={removePerson}>delete</button>\n  </div>\n}\n\nconst Notification = ({ message }) => {\n  if (message.content === null) {\n    return null\n  }\n\n  const className = message.error ? 'error' : 'success'\n\n  return (\n    <div className={className}>\n      {message.content}\n    </div>\n  )\n}\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newSearch, setNewSearch ] = useState('')\n  const [ message, setMessage ] = useState({content: null, error: true})\n\n  useEffect(()=>{\n    personService\n      .getAll()\n      .then(initialValue=>{\n        setPersons(initialValue)\n      })\n  }, [])\n  \n  const personsToShow = persons.filter(person=>person.name.match(new RegExp(newSearch, 'i')))\n \n  const handleSearchByName = (event) => {\n    setNewSearch(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const removePersonOf = id => {\n    const personToRemove = persons.find(person=>person.id === id)\n    if(window.confirm(`Delete ${personToRemove.name}?`)) { \n      personService\n        .remove(id)\n        .then(initialValue => {\n          console.log(initialValue)\n          setPersons(persons.filter(person=>person.id !== id))\n        })\n        .catch(error => {\n          const newMessage = {\n            content: `Information of ${personToRemove.name} has already been removed from server`,\n            error: true\n          }\n          setMessage(newMessage)\n          setPersons(persons.filter(person => person.id !== id))\n        })\n      }\n  }\n\n  if(message.content) setTimeout(()=>{setMessage({content: null, error: true})}, 3000)\n\n  const addName = (event) => {\n    event.preventDefault()\n    const personExists = persons.find(person=>person.name===newName)\n\n    if ( personExists ) {\n      if (personExists.number===newNumber) alert(`${newName} is already added to phonebook`)\n      else \n        if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n          const newPerson = { ...personExists, number: newNumber }\n          personService\n            .update(personExists.id, newPerson)\n            .then(initialValue => {\n              setPersons(persons.map(person => person.id===initialValue.id ? initialValue : person ))\n              const newMessage = {content: `Updated ${initialValue.name}`, error: false}\n              setMessage(newMessage)\n            })\n        }\n    }\n    else { // person does not exist\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(newPerson)\n        .then(initialValue => {\n          setPersons(persons.concat(initialValue))\n          const newMessage = {content: `Added ${initialValue.name}`, error: false}\n          setMessage(newMessage)\n        })\n    }\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification message={message} />\n        <Filter inputValue={newSearch} onChangeHandler={handleSearchByName} />\n      \n      <h3>add a new</h3>\n        <PersonForm \n          name={newName} nameChangeHandler={handleNameChange}\n          number={newNumber} numChangeHandler={handleNumberChange}\n          submit={addName}\n          />\n      \n      <h3>Numbers</h3>\n        <Persons persons={personsToShow} removePersonOf={removePersonOf} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render( <App /> ,\n    document.getElementById('root')\n)"],"sourceRoot":""}